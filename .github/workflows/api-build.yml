name: webapi build

on:
  #pull_request:
  workflow_dispatch:
  push:
    branches:
      - build/ci-pipeline

env:
  dockerCacheFilename: "webapi-ci-image.tar"
  ciTag: "${{ secrets.ACR_URL }}/webapi/ci:latest"
  prTag: "${{ secrets.ACR_URL }}/webapi/pr:$PRNUMBER"
  github_apps_id: 194813
  github_apps_install_id: 25232808

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install git config parser
      run: npm install --save parse-git-config

    # Update all submodules referenced in .gitmodules using custom action for cloning
    - name: Generate token
      env:
        apps_id: ${{ env.apps_id }}
        install_id: ${{ env.install_id }}
        private_key: ${{ secrets.ZAPTEC_GIT_CONTENTS_APP_PRIVATE_KEY }}
      run: |
        # Run ruby script to create a signed json web token used to generate a token that is used in github api calls
        appsAccessToken=$(ruby .github/scripts/create-jwt.rb "$private_key" "$apps_id")

        # Generate github apps install token
        appsInstallToken=$(curl -s -X POST \
          -H "Authorization: Bearer $appsAccessToken" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/app/installations/$install_id/access_tokens | jq .token)

        # Trim quotes from the token
        installToken=$(echo "${appsInstallToken:1:${#appsInstallToken}-2}")

        # Set token as a variable
        echo "app_token=$appsInstallToken" >> $GITHUB_ENV

    - name: Clone submodule repos
      shell: pwsh
      env:
        token: ${{ env.app_token }}
      run: |
        .github/scripts/clone-submodules.ps1 -token $env:token -jsParseFilePath ".github/scripts/parse-submodules.js"

    # - uses: azure/docker-login@v1
    #   with:
    #     login-server: ${{ secrets.ACR_URL }}
    #     username: ${{ secrets.ACR_USERNAME }}
    #     password: ${{ secrets.ACR_PASSWORD }}


    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and export
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile.WebAPI
        tags: ${{ env.ciTag }}
        outputs: type=docker,dest=/tmp/${{ env.dockerCacheFilename }}

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.dockerCacheFilename }}
        path: /tmp/${{ env.dockerCacheFilename }}

  # ci:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: contains(github.event.pull_request.labels.*.name, 'Do not push docker ci image') == false 
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     # Download dockerfile from previous build stage to tag and push image to ACR for CI environment
  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.dockerCacheFilename }}
  #         path: /tmp

  #     - name: Azure ACR Login
  #       uses: azure/docker-login@v1
  #       with:
  #         login-server: ${{ secrets.ACR_URL }}
  #         username: ${{ secrets.ACR_USERNAME }}
  #         password: ${{ secrets.ACR_PASSWORD }}

  #     # Loads the image from Download artifact step
  #     - name: Load image
  #       run: |
  #         docker load --input /tmp/${{ env.dockerCacheFilename }}

  #     # Push CI image to ACR
  #     - name: Push image
  #       run: |
  #         docker push ${{ env.ciTag }}

  #     - uses: Azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_DEV_CREDENTIALS }}

  # PR:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: ${{ github.event_name == 'pull_request' }} && contains(github.event.pull_request.labels.*.name, 'Do not push pr') == false
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: set-variables
  #       run: |
  #         prNumber="$(cut -d'/' -f3 <<<${{ github.ref }})"
  #         echo "prNumber=$prNumber" >> $GITHUB_ENV

  #     # Download dockerfile from previous build stage to tag and push image to ACR for PR environment
  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ env.dockerCacheFilename }}
  #         path: /tmp

  #     - name: Azure ACR Login
  #       uses: azure/docker-login@v1
  #       with:
  #         login-server: ${{ secrets.ACR_URL }}
  #         username: ${{ secrets.ACR_USERNAME }}
  #         password: ${{ secrets.ACR_PASSWORD }}

  #     # Loads the image from Download artifact step
  #     - name: Load image
  #       run: |
  #         docker load --input /tmp/${{ env.dockerCacheFilename }}
  #     # Tag and push CI image to ACR
  #     - name: Tag and push image
  #       env:
  #         PRTAG: ${{ env.prTag }}
  #         PRNUMBER : ${{ env.prNumber }}
  #       run: |
  #         docker tag ${{ env.ciTag }} $PRTAG
  #         docker push $PRTAG